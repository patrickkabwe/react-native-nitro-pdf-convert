///
/// HybridNitroPdfConvertSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroPdfConvertSpec.hpp"

// Forward declaration of `HybridNitroPdfConvertSpec_cxx` to properly resolve imports.
namespace NitroPdfConvert { class HybridNitroPdfConvertSpec_cxx; }

// Forward declaration of `PdfConvertResult` to properly resolve imports.
namespace margelo::nitro::nitropdfconvert { struct PdfConvertResult; }

#include <NitroModules/Promise.hpp>
#include <vector>
#include "PdfConvertResult.hpp"
#include <string>

#include "NitroPdfConvert-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitropdfconvert {

  /**
   * The C++ part of HybridNitroPdfConvertSpec_cxx.swift.
   *
   * HybridNitroPdfConvertSpecSwift (C++) accesses HybridNitroPdfConvertSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroPdfConvertSpec_cxx can directly inherit from the C++ class HybridNitroPdfConvertSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroPdfConvertSpecSwift: public virtual HybridNitroPdfConvertSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroPdfConvertSpecSwift(const NitroPdfConvert::HybridNitroPdfConvertSpec_cxx& swiftPart):
      HybridObject(HybridNitroPdfConvertSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroPdfConvert::HybridNitroPdfConvertSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<std::vector<PdfConvertResult>>> toImages(const std::string& pdfPath) override {
      auto __result = _swiftPart.toImages(pdfPath);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<PdfConvertResult>> toPdf(const std::string& imagePath) override {
      auto __result = _swiftPart.toPdf(imagePath);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroPdfConvert::HybridNitroPdfConvertSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitropdfconvert
