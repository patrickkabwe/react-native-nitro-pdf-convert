///
/// NitroPdfConvert-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `HybridNitroPdfConvertSpec` to properly resolve imports.
namespace margelo::nitro::nitropdfconvert { class HybridNitroPdfConvertSpec; }
// Forward declaration of `PdfConvertResult` to properly resolve imports.
namespace margelo::nitro::nitropdfconvert { struct PdfConvertResult; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNitroPdfConvertSpec_cxx` to properly resolve imports.
namespace NitroPdfConvert { class HybridNitroPdfConvertSpec_cxx; }

// Include C++ defined types
#include "HybridNitroPdfConvertSpec.hpp"
#include "PdfConvertResult.hpp"
#include <NitroModules/Promise.hpp>
#include <NitroModules/PromiseHolder.hpp>
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <string>
#include <vector>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::nitropdfconvert::bridge::swift {

  // pragma MARK: std::vector<PdfConvertResult>
  /**
   * Specialized version of `std::vector<PdfConvertResult>`.
   */
  using std__vector_PdfConvertResult_ = std::vector<PdfConvertResult>;
  inline std::vector<PdfConvertResult> create_std__vector_PdfConvertResult_(size_t size) {
    std::vector<PdfConvertResult> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::shared_ptr<Promise<std::vector<PdfConvertResult>>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::vector<PdfConvertResult>>>`.
   */
  using std__shared_ptr_Promise_std__vector_PdfConvertResult___ = std::shared_ptr<Promise<std::vector<PdfConvertResult>>>;
  inline std::shared_ptr<Promise<std::vector<PdfConvertResult>>> create_std__shared_ptr_Promise_std__vector_PdfConvertResult___() {
    return Promise<std::vector<PdfConvertResult>>::create();
  }
  inline PromiseHolder<std::vector<PdfConvertResult>> wrap_std__shared_ptr_Promise_std__vector_PdfConvertResult___(std::shared_ptr<Promise<std::vector<PdfConvertResult>>> promise) {
    return PromiseHolder<std::vector<PdfConvertResult>>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const std::vector<PdfConvertResult>& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::vector<PdfConvertResult>&)>`.
   */
  using Func_void_std__vector_PdfConvertResult_ = std::function<void(const std::vector<PdfConvertResult>& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::vector<PdfConvertResult>& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__vector_PdfConvertResult__Wrapper final {
  public:
    explicit Func_void_std__vector_PdfConvertResult__Wrapper(std::function<void(const std::vector<PdfConvertResult>& /* result */)>&& func): _function(std::make_unique<std::function<void(const std::vector<PdfConvertResult>& /* result */)>>(std::move(func))) {}
    inline void call(std::vector<PdfConvertResult> result) const {
      _function->operator()(result);
    }
  private:
    std::unique_ptr<std::function<void(const std::vector<PdfConvertResult>& /* result */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_std__vector_PdfConvertResult_ create_Func_void_std__vector_PdfConvertResult_(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__vector_PdfConvertResult__Wrapper wrap_Func_void_std__vector_PdfConvertResult_(Func_void_std__vector_PdfConvertResult_ value) {
    return Func_void_std__vector_PdfConvertResult__Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  /**
   * Specialized version of `std::function<void(const std::exception_ptr&)>`.
   */
  using Func_void_std__exception_ptr = std::function<void(const std::exception_ptr& /* error */)>;
  /**
   * Wrapper class for a `std::function<void(const std::exception_ptr& / * error * /)>`, this can be used from Swift.
   */
  class Func_void_std__exception_ptr_Wrapper final {
  public:
    explicit Func_void_std__exception_ptr_Wrapper(std::function<void(const std::exception_ptr& /* error */)>&& func): _function(std::make_unique<std::function<void(const std::exception_ptr& /* error */)>>(std::move(func))) {}
    inline void call(std::exception_ptr error) const {
      _function->operator()(error);
    }
  private:
    std::unique_ptr<std::function<void(const std::exception_ptr& /* error */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__exception_ptr_Wrapper wrap_Func_void_std__exception_ptr(Func_void_std__exception_ptr value) {
    return Func_void_std__exception_ptr_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<Promise<PdfConvertResult>>
  /**
   * Specialized version of `std::shared_ptr<Promise<PdfConvertResult>>`.
   */
  using std__shared_ptr_Promise_PdfConvertResult__ = std::shared_ptr<Promise<PdfConvertResult>>;
  inline std::shared_ptr<Promise<PdfConvertResult>> create_std__shared_ptr_Promise_PdfConvertResult__() {
    return Promise<PdfConvertResult>::create();
  }
  inline PromiseHolder<PdfConvertResult> wrap_std__shared_ptr_Promise_PdfConvertResult__(std::shared_ptr<Promise<PdfConvertResult>> promise) {
    return PromiseHolder<PdfConvertResult>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const PdfConvertResult& /* result */)>
  /**
   * Specialized version of `std::function<void(const PdfConvertResult&)>`.
   */
  using Func_void_PdfConvertResult = std::function<void(const PdfConvertResult& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const PdfConvertResult& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_PdfConvertResult_Wrapper final {
  public:
    explicit Func_void_PdfConvertResult_Wrapper(std::function<void(const PdfConvertResult& /* result */)>&& func): _function(std::make_unique<std::function<void(const PdfConvertResult& /* result */)>>(std::move(func))) {}
    inline void call(PdfConvertResult result) const {
      _function->operator()(result);
    }
  private:
    std::unique_ptr<std::function<void(const PdfConvertResult& /* result */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_PdfConvertResult create_Func_void_PdfConvertResult(void* _Nonnull swiftClosureWrapper);
  inline Func_void_PdfConvertResult_Wrapper wrap_Func_void_PdfConvertResult(Func_void_PdfConvertResult value) {
    return Func_void_PdfConvertResult_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::nitropdfconvert::HybridNitroPdfConvertSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::nitropdfconvert::HybridNitroPdfConvertSpec>`.
   */
  using std__shared_ptr_margelo__nitro__nitropdfconvert__HybridNitroPdfConvertSpec_ = std::shared_ptr<margelo::nitro::nitropdfconvert::HybridNitroPdfConvertSpec>;
  std::shared_ptr<margelo::nitro::nitropdfconvert::HybridNitroPdfConvertSpec> create_std__shared_ptr_margelo__nitro__nitropdfconvert__HybridNitroPdfConvertSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__nitropdfconvert__HybridNitroPdfConvertSpec_(std__shared_ptr_margelo__nitro__nitropdfconvert__HybridNitroPdfConvertSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::nitropdfconvert::HybridNitroPdfConvertSpec>
  using std__weak_ptr_margelo__nitro__nitropdfconvert__HybridNitroPdfConvertSpec_ = std::weak_ptr<margelo::nitro::nitropdfconvert::HybridNitroPdfConvertSpec>;
  inline std__weak_ptr_margelo__nitro__nitropdfconvert__HybridNitroPdfConvertSpec_ weakify_std__shared_ptr_margelo__nitro__nitropdfconvert__HybridNitroPdfConvertSpec_(const std::shared_ptr<margelo::nitro::nitropdfconvert::HybridNitroPdfConvertSpec>& strong) { return strong; }
  
  // pragma MARK: Result<std::shared_ptr<Promise<std::vector<PdfConvertResult>>>>
  using Result_std__shared_ptr_Promise_std__vector_PdfConvertResult____ = Result<std::shared_ptr<Promise<std::vector<PdfConvertResult>>>>;
  inline Result_std__shared_ptr_Promise_std__vector_PdfConvertResult____ create_Result_std__shared_ptr_Promise_std__vector_PdfConvertResult____(const std::shared_ptr<Promise<std::vector<PdfConvertResult>>>& value) {
    return Result<std::shared_ptr<Promise<std::vector<PdfConvertResult>>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_std__vector_PdfConvertResult____ create_Result_std__shared_ptr_Promise_std__vector_PdfConvertResult____(const std::exception_ptr& error) {
    return Result<std::shared_ptr<Promise<std::vector<PdfConvertResult>>>>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<PdfConvertResult>>>
  using Result_std__shared_ptr_Promise_PdfConvertResult___ = Result<std::shared_ptr<Promise<PdfConvertResult>>>;
  inline Result_std__shared_ptr_Promise_PdfConvertResult___ create_Result_std__shared_ptr_Promise_PdfConvertResult___(const std::shared_ptr<Promise<PdfConvertResult>>& value) {
    return Result<std::shared_ptr<Promise<PdfConvertResult>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_PdfConvertResult___ create_Result_std__shared_ptr_Promise_PdfConvertResult___(const std::exception_ptr& error) {
    return Result<std::shared_ptr<Promise<PdfConvertResult>>>::withError(error);
  }

} // namespace margelo::nitro::nitropdfconvert::bridge::swift
