///
/// JHybridNitroPdfConvertSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroPdfConvertSpec.hpp"

// Forward declaration of `PdfConvertResult` to properly resolve imports.
namespace margelo::nitro::nitropdfconvert { struct PdfConvertResult; }

#include <NitroModules/Promise.hpp>
#include <vector>
#include "PdfConvertResult.hpp"
#include <NitroModules/JPromise.hpp>
#include "JPdfConvertResult.hpp"
#include <string>

namespace margelo::nitro::nitropdfconvert {

  jni::local_ref<JHybridNitroPdfConvertSpec::jhybriddata> JHybridNitroPdfConvertSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroPdfConvertSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroPdfConvertSpec::initHybrid),
    });
  }

  size_t JHybridNitroPdfConvertSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<Promise<std::vector<PdfConvertResult>>> JHybridNitroPdfConvertSpec::toImages(const std::string& pdfPath) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* pdfPath */)>("toImages");
    auto __result = method(_javaPart, jni::make_jstring(pdfPath));
    return [&]() {
      auto __promise = Promise<std::vector<PdfConvertResult>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JArrayClass<JPdfConvertResult>>(__boxedResult);
        __promise->resolve([&]() {
          size_t __size = __result->size();
          std::vector<PdfConvertResult> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = __result->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<PdfConvertResult>> JHybridNitroPdfConvertSpec::toPdf(const std::string& imagePath) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* imagePath */)>("toPdf");
    auto __result = method(_javaPart, jni::make_jstring(imagePath));
    return [&]() {
      auto __promise = Promise<PdfConvertResult>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JPdfConvertResult>(__boxedResult);
        __promise->resolve(__result->toCpp());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::nitropdfconvert
